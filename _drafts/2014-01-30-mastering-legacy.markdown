---
layout: post
title:  "Техническая гигиена"
date:   2014-01-30 00:00:00
abstract: "Fighting legacy"
categories:
  - project management
---

Все IT-проекты имеют свой жизненный цикл. Они рождаются, растут, стареют и заканчиваются.
Часто это естественный процесс. И поскольку вся сфера IT находится в активной стадии развития, время здесь
течет гораздо быстрее, чем в других отраслях человеческой деятельности. Есть несколько измерений
в которых проект развивается и деградирует: бизнес, организация и техническая реализация. Эти аспекты
связаны не жестко и часто происходит расстройство. Например система обладает бизнес-ценностью
и имеет хороший потенциал, но скоропостижно приближается "техническая старость": технологии устарели,
команда потеряла контроль над размером и сложностью системы, у разработчиков появляется ощущение "отчаяния"
и отчуждения. Если понять эту болезнь и ее причины, то можно попробовать подобрать правильный курс профилактики и лечения.

В первую очередь болезнь поражает организационный аппарат и начинать нужно с него. Но в данной
статье хотелось бы поговорить про нарушения технического здоровья проекта.


## Представим себе типичный случай:

Новый проект! Выбираем технологии - берем те что знаем и новые/модные (попробовать).
Есть энтузиазм и энергия - верим в лучшее.
Активная разработка - важен быстрый результат (срезаем края, пишем что бы заработало).
И вот оно заработало и запущено в эксплуатацию. Первые проблемы решаем ad-hock (лишь бы решить).
Постепенно понимаем о чем речь и вырабатываем более удачные решения.
Кодовая база еще свежа и не велика, проект в стадии БЕТА и у нас хватает смелости вносить правки по живому.

Но постепенно сопровождение начинает вставлять палки в колеса разработки:

* важные данные - меняя схему хранилища нужно их мигрировать
* появляется инфраструктура - нужно разворачивать, накатывать новые версии, делать резервные копии данных и следить за серверами
* функционал нарастает - необходимо тестировать и чинить ошибки регрессии
* пользователи привыкают - изменения нужно согласовывать
* планируются новые возможности, а времени на приведение в порядок старых почти нет
* надо платить за некоторые допущенные вначале ошибки
* появляются новые требования, которые разносят в пух и прах сделанные вами предположения и вытекающие из них решения нужно переделывать
* в команду добавляются новые люди, и нужно их вводить в курс дела
* команда растет, коммуникация и как следствие взаимопонимание и терпимость падает, начинаются первые разногласия
* в системе появляются уголки, в которых разбираются только сделавшие их люди (а они ушли в отпуск)
* еще немного и технологии начинают устаревать и их нужно обновлять
* ...

Это подобно медленному взрыву. Времени все меньше, задач все больше. Наступают
первые моменты "бессилия" и "безразличия".  Работа начинает обгладывать ваш сон и досуг.
Подстерегает [прокрастинация] и [отчуждение].

Как совладать с этим разно-калиберным шквалом и не потерять голову?

Как быстро принимать решения и меньше ошибаться в такой ситуации?

## Принципы

Лабиринты бывают разные, но из всех односвязных можно выйти руководствуясь методом правой или левой руки,
а из многосвязных методом [Люка и Тремо](http://www.ega-math.narod.ru/Nquant/Maze.htm).

Здесь к нам на помощь приходят принципы и методики. Вы должны в них одеться как в доспехи.

## Принцип Боли

Вы приезжаете в Лос-Анджелес познакомиться с США, инвесторами и с тем как используют вашу систему.
Погода прекрасная (цветут гранаты), но вам нужно ехать в дата-центр чтобы воткнуть еще пару новеньких серверов,
предварительно в гараже поставив на них Ubuntu. И вот вы с отверткой в зубах и с проектным менеджером поддерживающим
стремянку пытаетесь запихать в переполненную стойку 15 килограммовый Dell...

Вы поцеловав дочек и почитав SICP в сладких фантазиях отходите ко сну, но в тот момент когда вам сниться,
что вы практически осознали смысл жизни через лямбда-исчисление, раздается звонок - сервер не выходит на связь.
И вот вы в трусах на кухне отдаете инструкции чудаковатому админу снимающему с телефона скрины дымящегося сервера,
какую кнопочку нажать и какую команду ввести в консоли восстановления (в душе умоляя чтобы рэйд не рассыпался)...

Вы переплавляете увесистый базовый бэкап на новый stand-by - звонок - приложение не доступно.
Сеть легла - маршрутизатору плохо.


[Боль](http://ru.wikipedia.org/wiki/%D0%91%D0%BE%D0%BB%D1%8C) это сигнальный механизм организма,
сообщающий о серьезной проблеме. Необходимо научиться правильно ее чувствовать:
те вовремя осознать ее  - выяснить причину и постараться устранить, даже ценой другой временной боли.

Итак приходиться сделать пластическую операцию нашей системе, которая привыкла жить на мэйн-фрейме,
- подготовить ее морально к амазоновским одноразовым виртуалочкам. Подождать много часов пока данные перельются
в облако. Поставить на уши госпитальных админов - переключить вэпээны и все потоки входящих/исходящих сообщений.
И тд и тп, но решить проблему в корне и забыть о ней!

Итак хроническая боль это наша путеводная звезда - прямое руководство к действию.
Счатлив не тот, кто испытывает удовольствие, но тот кто не страдает!

## Принцип Страха

Мы долго ходили вокруг DevOps & Chef, после глубокого разочарования в админах. И в момент когда наша Capistrano
уже почти превратилась в клон Chefa мы решились. Разобравшись мы записали все рецепты, вдохновленные даже перевели
deploy на Chef. Накатили все на staging и потом на production и ... В какой-то момент поняли, что уже боимся менять
код рецептов. У них большая связанность. Некоторые интегральные рецепты вовлекают по несколько нод.
Цикл разработки длинный code -> upload to chef-server -> deploy to staging -> ssh & test. Обнаружили Vagrant - несколько
облегчило, но стэк глубокий и все равно все руками! И если ты например месяц не поработал infrastructure, то боишься
что даже для простой задачи ты будешь пол дня себе песочницу создавать!
